[project]
name = "openscope-rl"
version = "0.1.0"
description = "Reinforcement Learning training system for OpenScope air traffic control simulator with self-contained ATC environments"
readme = "README.md"
requires-python = "==3.11.*"
license = { text = "MIT" }
authors = [
    { name = "OpenScope RL Team" }
]
keywords = ["reinforcement-learning", "air-traffic-control", "ppo", "transformer", "stable-baselines3", "atc", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML libraries
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "gymnasium>=0.29.0",
    # Reinforcement Learning
    "stable-baselines3[extra]>=2.0.0", # PPO + extras (tensorboard, rich, etc.)
    "sb3-contrib>=2.0.0", # For ActionMasker and other wrappers
    # Game interface
    "playwright>=1.40.0",
    # Experiment Tracking
    "wandb>=0.22.2",
    # Utilities
    "pyyaml>=6.0",
    "tqdm>=4.66.0",
    "matplotlib>=3.8.0",
    "requests>=2.31.0",
    # Jupyter support
    "jupyter>=1.0.0",
    "nest-asyncio>=1.5.0",  # Required for Jupyter async compatibility
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[project.scripts]

[project.urls]
Homepage = "https://github.com/openscope/openscope"
Documentation = "https://github.com/openscope/openscope/tree/develop/documentation"
Repository = "https://github.com/openscope/openscope"
Issues = "https://github.com/openscope/openscope/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["environment", "models"]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function call in argument defaults
    "N803",  # argument name should be lowercase (conflicts with PyTorch convention)
    "E722",  # bare except (sometimes needed for resilience)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"*.ipynb" = ["E402"]  # Jupyter notebooks have imports throughout
"test_*.py" = ["E402"]  # Test files can have inline imports
"verify_*.py" = ["E722"]  # Verification scripts can use bare except

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
ignore_missing_imports = true
